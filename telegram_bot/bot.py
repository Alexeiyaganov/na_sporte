import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7564444541:AAF4H4vv1m7JwE24v5Cqwe9SpQniZvUg8bo")

# –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô URL GitHub Pages
WEB_APP_URL = "https://alexeiyaganov.github.io/na_sporte/"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üèÉ –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="mode_events")],
        [InlineKeyboardButton("üë• –ù–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞", callback_data="mode_people")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üèÉ **SportEvents Map**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "mode_events":
        keyboard = [[InlineKeyboardButton(
            "üîç –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            web_app=WebAppInfo(url=f"{WEB_APP_URL}?mode=events")
        )]]
        await query.edit_message_text(
            "üèÉ **–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π**\n\n–ù–∞–π–¥–∏—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º —Å –≤–∞–º–∏!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    elif query.data == "mode_people":
        keyboard = [[InlineKeyboardButton(
            "üë• –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤",
            web_app=WebAppInfo(url=f"{WEB_APP_URL}?mode=people")
        )]]
        await query.edit_message_text(
            "üë• **–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤**\n\n–ù–∞–π–¥–∏—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
    if 'RAILWAY_STATIC_URL' in os.environ:
        logger.info("Running on Railway with webhook")
        port = int(os.environ.get("PORT", 8000))
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=os.environ.get('RAILWAY_STATIC_URL', ''),
            secret_token='webhook_secret'
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        logger.info("Running locally with polling")
        application.run_polling()


if __name__ == "__main__":
    main()
