# flask_app.py
from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime, timedelta
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
trainings_storage = {}
training_participants = {}
user_locations = {}

# Mock –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
MOCK_EVENTS = [
    {
        "id": 1, "title": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –º–∞—Ä–∞—Ñ–æ–Ω 2024", "sport": "–±–µ–≥",
        "description": "–ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–µ–Ω–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã",
        "date": "2024-09-15", "location": "–ú–æ—Å–∫–≤–∞, –í–æ—Ä–æ–±—å–µ–≤—ã –≥–æ—Ä—ã",
        "lat": 55.710, "lng": 37.553
    },
    {
        "id": 2, "title": "–ù–æ—á–Ω–æ–π –≤–µ–ª–æ–ø—Ä–æ–±–µ–≥", "sport": "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç",
        "description": "–ù–æ—á–Ω–∞—è –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–º —É–ª–∏—Ü–∞–º –≥–æ—Ä–æ–¥–∞",
        "date": "2024-10-20", "location": "–ú–æ—Å–∫–≤–∞, –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
        "lat": 55.731, "lng": 37.603
    }
]

# –†–µ–∫–ª–∞–º–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
PROMOTED_LOCATIONS = [
    {
        "id": "promo_1",
        "title": "üèÉ –ë–µ–≥–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –≤ –ü–∞—Ä–∫–µ –ì–æ—Ä—å–∫–æ–≥–æ",
        "description": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π —É—Ç—Ä–µ–Ω–Ω–µ–π –±–µ–≥–æ–≤–æ–π –≥—Ä—É–ø–ø–µ!",
        "lat": 55.731,
        "lng": 37.603,
        "sport": "–±–µ–≥",
        "promo_text": "üî• –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –±–µ–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –≥–æ—Ä–æ–¥–∞!"
    },
    {
        "id": "promo_2",
        "title": "üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ö—Ä—ã–ª–∞—Ç—Å–∫–æ–º",
        "description": "–ò–¥–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã –¥–ª—è –≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "lat": 55.756,
        "lng": 37.438,
        "sport": "–≤–µ–ª–æ—Å–ø–æ—Ä—Ç",
        "promo_text": "üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã –¥–ª—è –≤–µ–ª–æ—Å–ø–æ—Ä—Ç–∞"
    }
]


@app.route('/')
def root():
    return jsonify({"message": "SportEvents API is running", "status": "success"})


@app.route('/api/events', methods=['GET'])
def get_events():
    """API –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    try:
        sport = request.args.get('sport')
        lat = request.args.get('lat', type=float)
        lng = request.args.get('lng', type=float)
        radius = request.args.get('radius', type=int)

        events = MOCK_EVENTS.copy()

        if sport:
            events = [e for e in events if e['sport'] == sport]

        if lat and lng and radius:
            events = [e for e in events if calculate_distance(lat, lng, e['lat'], e['lng']) <= radius]

        return jsonify({"status": "success", "data": events})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


@app.route('/api/trainings', methods=['GET'])
def get_trainings():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"""
    try:
        lat = request.args.get('lat', type=float)
        lng = request.args.get('lng', type=float)
        radius = request.args.get('radius', default=5, type=int)
        sport = request.args.get('sport', '')

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        cleanup_old_trainings()

        nearby_trainings = []

        for training_id, training_data in trainings_storage.items():
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞
            if sport and training_data.get('sport') != sport:
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            if lat and lng:
                distance = calculate_distance(lat, lng, training_data["lat"], training_data["lng"])
                if distance <= radius:
                    training_data = training_data.copy()
                    training_data['distance'] = round(distance, 2)
                    training_data['participants_count'] = len(training_participants.get(training_id, []))
                    nearby_trainings.append(training_data)

        return jsonify({"status": "success", "data": nearby_trainings})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


@app.route('/api/trainings', methods=['POST'])
def create_training():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    try:
        data = request.get_json()
        print("Received training data:", data)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['user_id', 'title', 'sport', 'lat', 'lng', 'start_time']
        for field in required_fields:
            if not data.get(field):
                return jsonify({"status": "error", "message": f"Missing required field: {field}"}), 400

        training_id = f"training_{int(datetime.now().timestamp())}"

        training_data = {
            "id": training_id,
            "user_id": data['user_id'],
            "title": data['title'],
            "description": data.get('description', ''),
            "sport": data['sport'],
            "lat": float(data['lat']),
            "lng": float(data['lng']),
            "start_time": data['start_time'],
            "end_time": data.get('end_time'),
            "comment": data.get('comment', ''),
            "auto_accept": data.get('auto_accept', True),
            "created_at": datetime.now().isoformat(),
            "user_name": data['user_name'],
            "user_photo": data.get('user_photo')
        }

        trainings_storage[training_id] = training_data
        training_participants[training_id] = []

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        join_training(training_id, data['user_id'], data['user_name'], data.get('user_photo'))

        logger.info(f"Training created successfully: {training_id}")

        return jsonify({
            "status": "success",
            "training_id": training_id,
            "message": "Training created successfully",
            "data": training_data
        })

    except Exception as e:
        logger.error(f"Error creating training: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500


@app.route('/api/trainings/<training_id>/join', methods=['POST'])
def join_training_endpoint(training_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    try:
        data = request.get_json()

        if training_id not in trainings_storage:
            return jsonify({"status": "error", "message": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

        training = trainings_storage[training_id]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ-–ø—Ä–∏–Ω—è—Ç–∏—è
        if training['auto_accept']:
            join_training(training_id, data['user_id'], data['user_name'], data.get('user_photo'))
            return jsonify({"status": "success", "message": "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"})
        else:
            return jsonify({"status": "success", "message": "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É—á–∞—Å—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É"})

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


def join_training(training_id, user_id, user_name, user_photo):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    if training_id not in training_participants:
        training_participants[training_id] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    for participant in training_participants[training_id]:
        if participant['user_id'] == user_id:
            return

    training_participants[training_id].append({
        "user_id": user_id,
        "user_name": user_name,
        "user_photo": user_photo,
        "joined_at": datetime.now().isoformat()
    })


@app.route('/api/trainings/<training_id>/participants', methods=['GET'])
def get_training_participants(training_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        participants = training_participants.get(training_id, [])
        return jsonify({"status": "success", "data": participants})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


@app.route('/api/users/location', methods=['POST'])
def update_user_location():
    """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()

        user_locations[data['user_id']] = {
            "user_id": data['user_id'],
            "lat": data['lat'],
            "lng": data['lng'],
            "last_updated": datetime.now()
        }

        return jsonify({"status": "success", "message": "Location updated"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


@app.route('/api/promoted-locations', methods=['GET'])
def get_promoted_locations():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏"""
    return jsonify({"status": "success", "data": PROMOTED_LOCATIONS})


@app.route('/api/debug/trainings', methods=['GET'])
def debug_trainings():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    return jsonify({
        "status": "success",
        "trainings_count": len(trainings_storage),
        "trainings": trainings_storage,
        "participants": training_participants
    })


def cleanup_old_trainings():
    """–û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤"""
    current_time = datetime.now()
    training_ids_to_remove = []

    for training_id, training_data in trainings_storage.items():
        created_at = datetime.fromisoformat(training_data['created_at'])
        if current_time - created_at > timedelta(hours=24):
            training_ids_to_remove.append(training_id)

    for training_id in training_ids_to_remove:
        trainings_storage.pop(training_id, None)
        training_participants.pop(training_id, None)


def calculate_distance(lat1, lon1, lat2, lon2):
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–º)"""
    return ((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2) ** 0.5 * 111


if __name__ == "__main__":
    app.run(debug=True)